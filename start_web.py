#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de inicio para la aplicaci√≥n web del convertidor BOB ‚Üí USDT.

Este script inicia el servidor Flask con configuraciones optimizadas
para desarrollo y producci√≥n.

Uso:
    python start_web.py              # Modo desarrollo
    python start_web.py --production # Modo producci√≥n

Autor: Desarrollado para el proyecto Binance USDT/BOB Rate Tracker
Fecha: Julio 2025
"""

import argparse
import os
import sys
from web_app import app

def main():
    parser = argparse.ArgumentParser(description='Iniciar aplicaci√≥n web del convertidor BOB ‚Üí USDT')
    parser.add_argument('--production', '-p', action='store_true',
                       help='Ejecutar en modo producci√≥n')
    parser.add_argument('--host', default='0.0.0.0',
                       help='Host para el servidor (default: 0.0.0.0)')
    parser.add_argument('--port', type=int, default=5000,
                       help='Puerto para el servidor (default: 5000)')
    
    args = parser.parse_args()
    
    print("üöÄ Iniciando Convertidor BOB ‚Üí USDT")
    print("=" * 50)
    
    if args.production:
        print("‚ö° Modo: PRODUCCI√ìN")
        print("‚ö†Ô∏è  ADVERTENCIA: Para producci√≥n real, usa un servidor WSGI como Gunicorn")
        debug_mode = False
    else:
        print("üîß Modo: DESARROLLO")
        debug_mode = True
    
    print(f"üåê Host: {args.host}")
    print(f"üîå Puerto: {args.port}")
    print(f"üîó URL: http://{args.host}:{args.port}")
    print("=" * 50)
    print()
    
    # Verificar configuraci√≥n de base de datos
    config_path = os.path.join(os.path.dirname(__file__), 'db_config.ini')
    if not os.path.exists(config_path):
        print("‚ùå ERROR: No se encuentra db_config.ini")
        print("   Por favor, crea el archivo bas√°ndote en db_config.example.ini")
        sys.exit(1)
    
    print("‚úÖ Configuraci√≥n de base de datos encontrada")
    print("üîÑ Iniciando servidor Flask...")
    print()
    
    try:
        app.run(
            host=args.host,
            port=args.port,
            debug=debug_mode,
            threaded=True
        )
    except KeyboardInterrupt:
        print("\nüëã Servidor detenido por el usuario")
    except Exception as e:
        print(f"\n‚ùå Error al iniciar el servidor: {str(e)}")
        sys.exit(1)

if __name__ == '__main__':
    main()